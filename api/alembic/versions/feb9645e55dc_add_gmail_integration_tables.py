"""add_gmail_integration_tables

Revision ID: feb9645e55dc
Revises: 6fd6646dfeca
Create Date: 2025-10-23 13:40:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'feb9645e55dc'
down_revision = '6fd6646dfeca'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('gmail_sync_state',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('last_history_id', sa.String(length=255), nullable=True),
    sa.Column('last_synced_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_gmail_sync_state_user_id'), 'gmail_sync_state', ['user_id'], unique=False)
    
    # Update raw_emails table
    # 1) Add new columns as NULLable first to allow backfill
    op.add_column('raw_emails', sa.Column('message_id', sa.String(length=255), nullable=True))
    op.add_column('raw_emails', sa.Column('history_id', sa.String(length=255), nullable=True))
    op.add_column('raw_emails', sa.Column('recipient', sa.String(length=512), nullable=True))
    op.add_column('raw_emails', sa.Column('received_at', sa.DateTime(), nullable=True))
    op.add_column('raw_emails', sa.Column('body', sa.Text(), nullable=True))
    op.add_column('raw_emails', sa.Column('is_deleted', sa.Boolean(), nullable=True))
    
    # 2) Backfill message_id from old email_id
    op.execute("UPDATE raw_emails SET message_id = email_id WHERE message_id IS NULL")
    
    # 3) Enforce NOT NULL on message_id after backfill
    op.alter_column('raw_emails', 'message_id', existing_type=sa.String(length=255), nullable=False)
    
    # 4) Drop old index and create new ones
    op.drop_index('ix_raw_emails_email_id', table_name='raw_emails')
    op.create_index(op.f('ix_raw_emails_history_id'), 'raw_emails', ['history_id'], unique=False)
    op.create_index(op.f('ix_raw_emails_is_deleted'), 'raw_emails', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_raw_emails_message_id'), 'raw_emails', ['message_id'], unique=True)
    
    # 5) Drop old columns
    op.drop_column('raw_emails', 'sent_at')
    op.drop_column('raw_emails', 'email_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add back old columns
    op.add_column('raw_emails', sa.Column('email_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('raw_emails', sa.Column('sent_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    
    # Drop new indexes and create old one
    op.drop_index(op.f('ix_raw_emails_message_id'), table_name='raw_emails')
    op.drop_index(op.f('ix_raw_emails_is_deleted'), table_name='raw_emails')
    op.drop_index(op.f('ix_raw_emails_history_id'), table_name='raw_emails')
    op.create_index('ix_raw_emails_email_id', 'raw_emails', ['email_id'], unique=False)
    
    # Drop new columns
    op.drop_column('raw_emails', 'is_deleted')
    op.drop_column('raw_emails', 'body')
    op.drop_column('raw_emails', 'received_at')
    op.drop_column('raw_emails', 'recipient')
    op.drop_column('raw_emails', 'history_id')
    op.drop_column('raw_emails', 'message_id')
    
    # Drop gmail_sync_state table
    op.drop_index(op.f('ix_gmail_sync_state_user_id'), table_name='gmail_sync_state')
    op.drop_table('gmail_sync_state')
    # ### end Alembic commands ###